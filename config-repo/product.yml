server:
  port: 7001
  error.include-message: always

spring:
  application.name: product
  data.mongodb:
#      host: localhost
#      port: 27017
#      authentication-database: admin
#      database: productdb
      auto-index-creation: true
      uri: mongodb://${SPRING_DATA_MONGODB_USERNAME}:${SPRING_DATA_MONGODB_PASSWORD}@localhost:27017/productDB?authSource=admin
#      username: ${SPRING_DATA_MONGODB_USERNAME}
#      password: ${SPRING_DATA_MONGODB_PASSWORD}
  cloud:
    function.definition: messageProcessor
    stream:
      default.contentType: application/json
      bindings:
        messageProcessor-in-0:
          destination: products
          group: productsGroup
          consumer:
            max-attempts: 3
            back-off-initial-interval: 500
            back-off-max-interval: 1000
            back-off-multiplier: 2.0

      rabbit.bindings:
        messageProcessor-in-0:
          consumer:
            auto-bind-dlq: true
            republish-to-dlq: true
      kafka:
        bindings:
          messageProcessor-in-0:
            consumer:
              enable-dlq: true


logging:
  level:
    root: info
    org.tbl.microdaddy: debug
    org.springframework.data.mongodb.core.ReactiveMongoTemplate: debug
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

---
spring:
  config:
    activate:
      on-profile: docker
  data.mongodb:
    uri: mongodb://${SPRING_DATA_MONGODB_USERNAME}:${SPRING_DATA_MONGODB_PASSWORD}@mongodb:27017/productDB?authSource=admin


server.port: 80

---
spring.config.activate.on-profile: production

spring.data.mongodb.host: 172.17.0.1

logging:
  level:
    root: WARN
    se.magnus: WARN
    org.springframework.data.mongodb.core.MongoTemplate: WARN

---
spring:
  config.activate.on-profile: kafka
  cloud:
    stream:
      default-binder: kafka
      kafka.binder.replication-factor: 1
  kafka:
    bootstrap-servers: kafka:9092

management.health.rabbit.enabled: false

---
spring:
  config.activate.on-profile: streaming_instance_0
  cloud.stream.bindings:
    messageProcessor-in-0:
      consumer:
        instance-index: 0

---
spring:
  config.activate.on-profile: streaming_instance_1
  cloud.stream.bindings:
    messageProcessor-in-0:
      consumer:
        instance-index: 1

---
spring:
  config.activate.on-profile: streaming_partitioned
  cloud.stream.bindings:
    messageProcessor-in-0:
      consumer:
        partitioned: true
        instance-count: 2




