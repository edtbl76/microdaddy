springdoc:
  swagger-ui:
    path: /openapi/swagger-ui.html
    oauth2-redirect-url: https://localhost:8443/webjars/swagger-ui/oauth2-redirect.html
    oauth:
      client-id: writer
      client-secret: writer
      use-basic-authentication-with-access-code-grant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: org.tbl.microdaddy.composite.product
  pathsToMatch: /**
  cache.disabled: true


api:

  common:
    version: 1.0.0
    title: Product Composite API
    description: Aggregation of Product, Composite, and Review Microservices
    termsOfService: I don't have any ToS
    license: MIT License
    licenseUrl: https://opensource.org/license/mit/

    externalDocDesc: GitHub Page
    externalDocUrl: https://github.com/edtbl76/microdaddy
    contact:
      name: Ed Mangini
      url: https://emangini.com
      email: me@emangini.com

  responseCodes:

    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. If no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: | 
        # Normal response
        The composite product data posted ot the API will be decomposed into stores as separate product, recommendation
        and review entities.
        
        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists, 
           an **422 - Unprocessable Entity** error wiht a "duplicate key" error message will be returned

      delete-composite-product:
        description: Deletes a composite product
        notes: |
          # Normal response
          Entities for product, recommendations and reviews related to the provided productId will be deleted.
          The implementation odf the delete method is idempotent, i.e. it can be called several times with the same
          response and no additional side effects. 
          
          This means that a delete request of a non-existing product will return **200 OK**.
    


server:
  port: 7000
  error.include-message: always
  forward-headers-strategy: framework

app:
  eureka-username: username
  eureka-password: password
  eureka-server: localhost
  auth-server: localhost


spring:
#  TODO remove this at some point.
  main.allow-circular-references: true
  application.name: product-composite
  security.oauth2.resourceserver.jwt.issuer-uri: https://dev-k26mww20c882irv6.us.auth0.com/
  cloud.stream:
    default-binder: rabbit
    bindings:
      products-out-0:
        destination: products
        producer:
#          use-native-encoding: true
          required-groups: auditGroup
      recommendations-out-0:
        destination: recommendations
        producer:
#          use-native-encoding: true
          required-groups: auditGroup
      reviews-out-0:
        destination: reviews
        producer:
#          use-native-encoding: true
          required-groups: auditGroup
    kafka.binder:
      brokers: 127.0.0.1
      defaultBrokerPort: 9092
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    ## set to true to debug security WebFlux headers.
  codec:
    log-request-details: true


eureka:
  client:
    service-url:
      defaultZone: http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/
    initial-instance-info-replication-interval-seconds: 5
    registry-fetch-interval-seconds: 5
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 5

logging.level:
    root: info
    org.tbl.microdaddy: debug
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: trace

management:
  endpoint.health.show-details: always
  endpoints.web.exposure.include: "*"

---
spring:
  config.activate.on-profile: docker
  rabbitmq.host: rabbitmq
  cloud.stream.kafka.binder.brokers: kafka

server.port: 8080

app:
  eureka-server: eureka
  auth-server: auth-server

---
spring:
  config.activate.on-profile: streaming_partitioned
  cloud.stream.bindings:
    products-out-0:
      producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2
    recommendations-out-0:
      producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2
    reviews-out-0:
      producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2

---
spring:
  config.activate.on-profile: kafka
  cloud.stream:
    default-binder: kafka
    kafka.binder.replication-factor: 1
  kafka.bootstrap-servers: kafka:9092

management.health.rabbit.enabled: false


